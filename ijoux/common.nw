\documentclass{book}

\usepackage[a4paper]{geometry}
\usepackage{noweb}
\usepackage{amsmath,amsfonts,amssymb}
\usepackage{parskip}
\usepackage{xspace}
\usepackage{hyperref}

\usepackage{tikz}
\usetikzlibrary{decorations.pathreplacing}


\begin{document}
\setcounter{part}{2}
\part{The Iterated Joux \textsf{3XOR} Algorithm}
\chapter{Introduction}

As in the quadratic algorithm, for a given instance $(A, B, C)$ of the problem, 
we may split it into a 2D array of size $2^k \times 2^k$, where the 
sub-instance of coordinates $(i, j)$ is $(A^{[i]}, B^{[j]}, C^{[i \oplus j]})$.

This partition of the problem is necessary to create sub-instances where $A_i$ 
and $B_j$ simultaneously fit in the RAM of the worker nodes.

The computation is in organised along a 3D partition of the original instance. 

\begin{description}
\item[Coarse tasks] The original instance is split into a 2D array of 
\textbf{coarse tasks} of size $2^k \times 2^k$ during preprocessing, according 
to the partitioning key, just as in the quadratic algorithm. The slices of the 
input lists corresponding to coarse tasks should be small enough to fit in RAM.
$k = 4$ or $k = 5$ seems reasonable.

\item[Fine tasks] The processing time of a coarse task is likely too large for 
practical purposes. Coarse tasks are then partitioned into a 1D array of \textbf{fine tasks}
by partitioning $C_{i \oplus j}$ into $k'$ equal-sized subslices. The 
``unit of computation'' is the fine task (i.e. the task server dispatches fine 
tasks). In the sequel, ``tasks'' are \emph{fine} tasks.

\item[Blocks] On a single machine, fine tasks $(A', B', C')$ are split into a 
1D array by splitting $C'$ in very small slices $C'_i$ (of size $\leq 64$). 
A \textbf{block} corresponds to one slice $C_i$ (and the full $A', B'$). 
The work to do inside a block can be parallelized, but this is non-trivial.
\end{description}



\begin{center}
  \begin{tikzpicture}[scale=0.9]
    \draw[<->] (-1, 0) -- node[above,sloped] {List $A$} +(0, 8);
    \draw[<->] (0, -1) -- node[below] {List $B$} +(8, 0);

    \node[anchor=south] at (4, 8) {Full instance};
    \draw[step=4cm, dashed] (0, 0) grid (8, 8);
    \draw[ultra thick] (0, 0) rectangle (8, 8);
    
    \node[anchor=south] at (6, 4) {Coarse Task $(1, 1)$};
    \draw[very thick] (4, 0) rectangle +(4, 4);
    %%%%%%

    \begin{scope}[xshift=5cm]
	\node[anchor=south] at (6, 4) {Coarse Task $(1, 1)$};
	\draw[very thick] (4, 0) rectangle +(4, 4);
	\draw[thick,xstep=1cm,ystep=4cm] (4, 0) grid +(4, 4);
	\path (6, 0) rectangle node[rotate=90,font=\scriptsize] {Fine task $(1,1,2)$} +(1, 4);

	\draw[xstep=0.1cm,ystep=4cm] (5, 0) grid +(1, 4);

	\draw[<->] (4, -1) -- node[below] {List $C$} +(4, 0);
    \end{scope}

  \end{tikzpicture}
\end{center}

Splitting the computation in fine tasks enables the use of several machines. 
Splitting a task in blocks enable the use of several computing units on the same 
machine. Splitting a block in chunks enable the use of several threads per 
computing unit.

\section{Work Distribution}

A \textbf{task description} is thus a sextuplet $(k, k', i, j, i \oplus j, r)$ with $0 \leq i,j < 2^k$. 
Let $m := \lfloor |C^{[i \oplus j]}| / k'\rfloor$. A \textbf{task result} is the list of all pairs $(x, y)$ such that $x \in A^{[i]}, y \in B^{[j]}$ and  $x \oplus y \in C^{[i \oplus j]}[rm:(r+1)m]$.

<<Type definitions>>=
struct jtask_id_t {
	u32 k;
	u32 idx[3];
	u32 k2;
	u32 r;
};

@ \section{Processing Tasks}

A task-processing function takes a task description and find all the solution triplets. A 
[[struct task_t]] contains the prefix length $k$ and a three-dimensional index,
with the constraint that [[idx[0] ^ idx[1] ^ idx[1] == 0]]). In fact, only the first two 
components are mandatory, but it is slighlty easier this way.

<<common.h>>=
#include <stdio.h>
#include "../types.h"
<<Type definitions>>
<<Function declarations>>


@ \section{Utilities (NOT DRY)}

Some very common function, such as timing, are also here.

<<Function declarations>>=
double wtime();
u64 ticks();

#define MAX(x, y) (((x) < (y)) ? (y) : (x))
#define MIN(x, y) (((x) < (y)) ? (x) : (y))

static inline u64 LEFT_MASK(u32 n)
{
	return ~((1ull << (64 - n)) - 1);
}

static inline u64 RIGHT_MASK(u32 n)
{
	return (1ull << n) - 1;
}

<<*>>=
#include <sys/time.h>
#include <stdlib.h>
#include <err.h>
#include "common.h"
<<Functions>>


<<Functions>>=
double wtime()
{
	struct timeval ts;
	gettimeofday(&ts, NULL);
	return (double)ts.tv_sec + ts.tv_usec / 1E6;
}

u64 ticks()
{
	u64 low, high;
	__asm__ volatile ("rdtsc" : "=a" (low), "=d" (high));
	return (high << 32) | low;
}

@ \section{Results}

Results are returned in a dynamic array. The type is NOT DRY wrt quadratic. 
The code in quadratic in NOT DRY wrt here.

<<Type definitions>>=
struct solution_t {
	u64 x, y, z;   /* triplet in A x B x C */
};

struct task_result_t {
	u32 size;
	u32 capacity;
	struct solution_t *solutions;
};

<<Function declarations>>=
struct task_result_t * result_init();
void report_solution(struct task_result_t *result, u64 x, u64 y, u64 z);
void result_free(struct task_result_t *result);


<<Functions>>=
struct task_result_t * result_init()
{
	struct task_result_t *result = malloc(sizeof(*result));
	if (result == NULL)
		err(1, "cannot allocate task result object");
	result->size = 0;
	result->capacity = 128;
	result->solutions = malloc(result->capacity * sizeof(struct solution_t));
	return result;
}

void result_free(struct task_result_t *result)
{
	free(result->solutions);
	free(result);
}

@ Reporting solutions always works the same.

<<Functions>>=
void report_solution(struct task_result_t *result, u64 x, u64 y, u64 z)
{
    if ((x ^ y ^ z) != 0)
	warnx("Fake solution reported");
    // printf("solution %016" PRIx64 " ^ %016" PRIx64 " in A\n", x, y);
    if (result->size == result->capacity) {
	result->solutions = realloc(result->solutions, 2 * result->capacity);
	if (result->solutions == NULL)
	    err(1, "failed to re-alloc solutions array");
	result->capacity *= 2;
    }
    result->solutions[result->size].x = x;
    result->solutions[result->size].y = y;
    result->solutions[result->size].z = z;
    result->size++;
}



@ \end{document}