\documentclass{book}

\usepackage[a4paper]{geometry}
\usepackage{noweb}
\usepackage{amsmath,amsfonts,amssymb}
\usepackage{parskip}
\usepackage{xspace}
\usepackage{hyperref}
\usepackage{tikz}

\newcommand{\MaRI}{\textsf{M4RI}\xspace}

\begin{document}
\setcounter{chapter}{1}
\chapter{Linear Algebra}

We essentially have two operations to perform: 
matrix multiplication A*M (where M is fixed) and finding the basis matrix M.
We rely on the \MaRI library.


<<*>>=
#include <math.h>
#include <stdio.h>

#include <m4ri/m4ri.h>
#include "linalg.h"

<<Functions>>

@ \section{Matrix multiplication}

We use a variant of the ``four russians'' trick to do fast matrix multiplication. 
The inline function [[gevm]] computes $x\cdot M$. It seems possible to use various 
low-level implementation tricks, but this is going to be platform-dependent.

<<linalg.h>>=
#ifndef LINALG_H
#define LINALG_H
#include "../types.h"

struct matmul_table_t {
	u64 tables[8][256] __attribute__((aligned(64)));
};

static inline u64 gemv(u64 x, const struct matmul_table_t * M)
{
	u64 r = 0;
	r ^= M->tables[0][x & 0x00ff];
	r ^= M->tables[1][(x >> 8) & 0x00ff];
	r ^= M->tables[2][(x >> 16) & 0x00ff];
	r ^= M->tables[3][(x >> 24) & 0x00ff];
	r ^= M->tables[4][(x >> 32) & 0x00ff];
	r ^= M->tables[5][(x >> 40) & 0x00ff];
	r ^= M->tables[6][(x >> 48) & 0x00ff];
	r ^= M->tables[7][(x >> 56) & 0x00ff];
	return r;
}

<<Public function declarations>>
#endif

@ The next step is to take an \MaRI matrix and convert it to our datastructure. 
A \MaRI matrix, namely a [[mzd_t]] object, has a [[row]] field which contains an
array of [[u64]]. Because our lists have width 64, there is always a single item
in each [[row]].

In our datastructure, [[table[i]]] contains all the 256 possible linear combinations
of rows $[8i: 8(i+1)]$. We use a gray code to compute these more efficiently. At the 
$j$-th step, we XOR the $k$-th row of the block of 8, where $k$ is the $2$-valuation of $j$.
The $j$-th word in gray code order is [[j ^ (j >> 1)]].

<<Functions>>=
void matmul_init(const mzd_t *M, struct matmul_table_t* T)
{
	for (u32 i = 0; i < 8; i++) {
		u32 lo = i * 8;
		T->tables[i][0] = 0;
		u64 tmp = 0;
		for (u32 j = 1; j < 256; j++) {
			u32 k =  __builtin_ctzll(j);
			tmp ^= M->rows[lo + k][0];
			T->tables[i][j ^ (j >> 1)] = tmp;
		}
	}
}

@ \section{Computing the Basis-Change Matrix}

Given a a parameter $0 \leq k < 64$ and slice $C$ (with less than $64 - k$ rows), 
we need to compute a $64 \times 64$ matrix $M$ such that:

\begin{center}
\begin{tikzpicture}
  \node at (-0.4, 0) {
    $C  M = \begin{pmatrix}
     0 & \dots & 0      & \star  & \ldots & \star\\
     \vdots &       & \vdots & \vdots &        & \vdots \\
     0 & \dots & 0      & \star  & \ldots & \star \\
   \end{pmatrix}$
 };
 \begin{scope}[xshift=-4mm]
 \draw[<->] (-1, -0.9) -- node[below] {$\geq k$} +(1.4, 0);
 \draw[<->] (0.75, -0.9) -- node[below] {$\leq 64 - k$} +(1.4, 0);
 %\draw[<->] (2.5, -0.8) -- node[right] {$n - k$\;} +(0, 1.5);
 \end{scope}
\end{tikzpicture}
\end{center}

This can be done thanks to a PLUQ factorization $C^{\mathrm{T}} = PLUQ$, where 
$P$ and $Q$ are permutation matrices, $L$ is lower-triangular with unit diagonal 
and $U$ is upper-trapezoidal (i.e. all coefficients bellow the diagonal are zeroes). 
Only the first $r$ rows of $U$ are non-zero, where $r$ denotes the rank of
$C$. It follows that $M = P \left(L^{\mathrm{T}}\right)^{-1}$ is a
suitable choice.

We must be aware that with this choice of $M$, the product $CM$ is structured: 
it is lower-trapezoidal, and it has exactly [[rank]] non-zero columns. If we wanted
to make it more random, we could right-multiply by a well-chosen invertible random matrix.

We will use \MaRI's functions to do all this. We keep in mind that, by default (at least
when built in Debian), \emph{\MaRI is not bloody thread-safe!}. We first build a \MaRI matrix
from a slice of our lists. \MaRI provides us a function to access the array of [[u64]] describing
the $i$-th row.

<<Functions>>=
mzd_t * list_slice(const u64 *L, u32 lo, u32 hi)
{
	assert(lo < hi);
	assert(m4ri_radix == 64);
	mzd_t *A = mzd_init(hi - lo, 64);
	for (u32 i = lo; i < hi; i++)
		mzd_row(A, i - lo)[0] = L[i];
	return A;
}

@ And we are now ready for the main dish. We compute ``multiplication tables'' 
for both $M$ and $M^{-1}$. 

<<Public function declarations>>=
u32 basis_change_matrix(const u64 *A, u32 lo, u32 hi, struct matmul_table_t *T,
                                           struct matmul_table_t *T_inv);
<<Functions>>=
u32 basis_change_matrix(const u64 *A, u32 lo, u32 hi, struct matmul_table_t *T,
                                           struct matmul_table_t *T_inv)
{
	mzd_t *C = list_slice(A, lo, hi);
	<<Compute the PLUQ factorization of $C^{T}$>>
	<<Extract $L$ from the factorization>>
	<<Do $L \gets P\times L$>>
	<<Compute multiplication tables for $L^{T}$>>
	<<Compute multiplication tables for $(L^{T})^{-1}$>>
	<<Cleanup>>
	return rank;
}

@ Let's go step-by-step. \MaRI computes the PLUQ factorization \emph{in-place}, 
with both $L$ and $U$ stacked into the matrix on output. The two permutation 
matrices $P$ and $Q$ are represented in [[mzp_t]] objects (in a bizarre way that
we don't want to ever have to understand).

<<Compute the PLUQ factorization of $C^{T}$>>=
mzd_t *E = mzd_transpose(NULL, C);
mzp_t* P = mzp_init(E->nrows);
mzp_t* Q = mzp_init(E->ncols);
u32 rank = mzd_pluq(E, P, Q, 0);
	
@ Once the factorization completes, both $L$ and $U$ are in $E$. 
$L$ is what is strictly below the diagonal, and $U$ is what is above the diagonal (included).
To extract $L$, we use bitmasks to extract the first $i$ columns on the $i$-th row, and
we restore the implicit 1 on the diagonal.

<<Extract $L$ from the factorization>>=
mzd_t *L = mzd_init(64, 64);
for (u32 i = 0; i < (u32) E->nrows; i++)
	mzd_row(L, i)[0] = (mzd_row(E, i)[0] & ((1ll << i) - 1)) | (1ll << i);
for (u32 i = E->nrows; i < 64; i++)
	mzd_row(L, i)[0] = (1ll << i);


@ Fortunately, \MaRI provides a function to left-multiply by a [[mzp_t]] permutation matrix.

<<Do $L \gets P\times L$>>=
mzd_apply_p_left_trans(L, P);

@ TODO: At this stage, we no longer need $E$, so we could free it, or reuse it.

<<Compute multiplication tables for $L^{T}$>>=
mzd_t *M_inv = mzd_transpose(NULL, L);
matmul_init(M_inv, T_inv);

<<Compute multiplication tables for $(L^{T})^{-1}$>>=
mzd_t *M = mzd_inv_m4ri(NULL, M_inv, 0);
matmul_init(M, T);

<<Cleanup>>=
mzd_free(M);
mzd_free(M_inv);
mzd_free(L);
mzd_free(E);
mzd_free(C);
mzp_free(P);
mzp_free(Q);

@ \section{Miscellaneous and Utility Functions}

We finally include debugging functions to print a vector and a list.

<<Public function declarations>>=
void print_list(const u64 *L, u32 N, int n);
void print_vector(u64 v, u32 n);

<<Functions>>=
void print_vector(u64 v, u32 n)
{
	u64 m = 0x8000000000000000ull;
	printf("[");
	for (u32 i = 0; i < n; i++) {
		printf("%s", (v & m) ? "1" : " ");
		m >>= 1;
	}
	printf("]");
}

void print_list(const u64 *L, u32 N, int n)
{
	for (u32 i = 0; i < N; i++) {
		print_vector(L[i], n);
		printf("\n");
	}
}

@ \end{document}