\documentclass{book}

\usepackage{geometry}
\usepackage{noweb}
\usepackage{amsmath,amsfonts,amssymb}
\usepackage{parskip}
\usepackage{xspace}
\usepackage{hyperref}

\newcommand{\join}{\bowtie}

\begin{document}

\setcounter{chapter}{2}
\chapter{The Iterated Joux Algorithm}


This file describes an implementation of the iterated Joux algorithm.  
The main function described in this file ``solves'' a (fine) task. 

<<*>>=
#include <math.h>
#include <stdlib.h>
#include <stdio.h>
#include <assert.h>
#include <err.h>
#include <sys/types.h>
#include <sys/stat.h>

#include "common.h"
#include "linalg.h"
#include "../quadratic/datastructures.h"

<<Type definitions>>
<<Forward declarations>>
<<Auxiliary functions>>
<<The main function>>

@ \section{Processing Tasks}

<<The main function>>=
struct task_result_t * iterated_joux_task(const char *hash_dir, struct jtask_id_t *task)
{
	static const bool verbose = true;
	struct task_result_t *result = result_init();
	double start = wtime();
	<<Load data from disk>>
	<<Prepare context>>
	if (verbose) {
		<<Display task info>>
	}
	for (u32 u = 0; u < n_blocks; u++)
		process_block_v0(&self, u, true);
	<<Release memory>>
	if (verbose) {
		<<Display task timing>>
	}
	return result;
}


@ \section{Preparations}

Preparations include loading the data from disk. We expected a fair amount of 
data (say, 1Gb). Therefore this may take some time. In the future, we would
use this time to do something useful (try to precompute some matrices ?).

<<Load data from disk>>=
u64 *slice[3];
u64 *scratch[3];
u32 size[3];
for (u32 kind = 0;  kind < 3; kind++) {	
	<<Determine [[filename]] and Query file size>>
	<<Allocate memory>>
	<<Open file and load hashes>>
	<<Allocate scratch space>>
}

@ The following code is NOT DRY wrt quadratic. If we are dealing with $C$, we
ajust the offset and size (as given by the task descriptor).

<<Determine [[filename]] and Query file size>>=
char filename[255];
char *kind_name[3] = {"foo", "bar", "foobar"};
sprintf(filename, "%s/%s.%03x", hash_dir, kind_name[kind], task->idx[kind]);
struct stat infos;
if (stat(filename, &infos))
	err(1, "fstat failed on %s", filename);
assert((infos.st_size % 8) == 0);
u64 m = infos.st_size / sizeof(u64) / task->k2;
u64 lo = 0;
u64 hi = infos.st_size;
if (kind == 2) {
	lo = 8 * (task->r * m);
	hi = MIN(hi, 8 * ((task->r  + 1) * m));
}
assert (lo != hi);

@ When allocating the memory, we enforce alignement on a 64-byte boundary 
(the size of a cache line on most CPUs). In addition, this allows aligned 
access for all possible sizes, including 256-bit registers.
For this, we use [[aligned_alloc]], available in \textsf{C11}.

<<Allocate memory>>=
u64 aligned_size = 64 * ceil((hi - lo) / 64.);
slice[kind] = aligned_alloc(64, aligned_size);
if (slice[kind] == NULL)
	err(1, "failed to allocate memory");
size[kind] = (hi - lo) / sizeof(u64);

<<Open file and load hashes>>=
FILE *f = fopen(filename, "r");
if (f == NULL)
	err(1, "fopen failed (%s)", filename);
fseek(f, lo, SEEK_SET);
u64 check = fread(slice[kind], 1, hi - lo, f);
if ((check != hi - lo) || ferror(f))
	err(1, "fread : read %" PRId64 ", expected %zd", check, hi - lo);
if (fclose(f))
	err(1, "fclose %s", filename);

<<Allocate scratch space>>=
scratch[kind] = aligned_alloc(64, aligned_size);
if (scratch[kind] == NULL)
	err(1, "failed to allocate memory");

<<Release memory>>=
for (u32 kind = 0;  kind < 3; kind++) {
	free(slice[kind]);
	free(scratch[kind]);
}


@ The task is split into blocks by splitting the $C$ list into very small 
slices of size $64 - \ell$. The optimal value of $\ell$ is $\max (\log_2 A, 
\log_2 B)$.

<<Type definitions>>=
struct context_t {
	struct task_result_t *result;
	u64 *slice[3];
	u64 *scratch[3];
	u32 size[3];
	u32 l;
};

<<Prepare context>>=
struct context_t self;
self.result = result;
for (u32 i = 0; i < 3; i++) {
	self.size[i] = size[i];
	self.slice[i] = slice[i];
	self.scratch[i] = scratch[i];
}
self.l = ceil(MAX(log2(size[0]), log2(size[1])));
u32 n_blocks = ceil(size[2] / (64. - self.l));



@ If requested, we are capable of displaying some information.

<<Display task info>>=
	/* task-level */
printf("Task: |A|=%d,  |B|=%d,  |C|=%d\n", size[0], size[1], size[2]);
double mbytes = 8. * (size[0] + size[1] + size[2]) / 1048576.0;
printf("Task volume : %.1fMbyte of hashes\n", mbytes);
double logsols = log2(size[0]) + log2(size[1]) + log2(size[2]);
printf("Est. #solutions : %g\n", pow(2, logsols - 64));
	/* block-level */
printf("Using l = %d\n", self.l);
printf("#blocks = %d\n", n_blocks);


<<Display task timing>>=
double task_duration = wtime() - start;
u32 n_coarse_tasks = 1 << (2 * task->k);
double total = task_duration * n_coarse_tasks * task->k2;
printf("Task duration: %.1f s\n", task_duration);
printf("Est. total time: %.3e h\n", total / 3600);


@ \section{Processing Blocks}

We define a simple auxiliary function to perform a matrix product.

We are ready for the big function. We compute the matrix $M$, then
for each pair $(x, y) \in AM \join BM$, we check whether $x ^ y \in CM$. Here,
$CM$ is very small. For now we get away with using a simple hash table with
linear probing.

<<Forward declarations>>=
void process_block_v0(struct context_t *self, u32 u, bool verbose);

<<Auxiliary functions>>=
void process_block_v0(struct context_t *self, u32 u, bool verbose)
{
	double start = wtime();
	struct task_result_t * local_result = result_init();
	<<Identify slice of $C$>>
	if (verbose) {
		<<Display stuff>>
	}
	<<Compute change of basis matrix>>
	<<Compute $AM, BM$ and $CM$>>
	qsort(AM, size[0], sizeof(u64), cmp);
	qsort(BM, size[1], sizeof(u64), cmp);
	struct hash_table_t *H = hashtable_build(CM, 0, slice_height);
	u32 probes = merge_join(AM, size[0], BM, size[1], l, H, local_result);
	hashtable_free(H);
	<<Backport solutions>>
	result_free(local_result);
	if (verbose) {
		<<Display timing info>>
	}
}

@ First, in all cases we will have to compute the change-of-basis matrix.

\subsection{Linear Algebra}

<<Forward declarations>>=
void gemm(const u64 *IN, u64 *OUT, u32 n, const struct matmul_table_t *M);

<<Auxiliary functions>>=
void gemm(const u64 *IN, u64 *OUT, u32 n, const struct matmul_table_t *M)
{
	for (u32 i = 0; i < n; i++)
		OUT[i] = gemv(IN[i], M);
}

<<Identify slice of $C$>>=
u32 size[3];
for (u32 i = 0; i < 3; i++)
	size[i] = self->size[i];
u32 l = self->l;
u32 slice_height = 64 - l;
u32 lo = u * slice_height;
u32 hi = MIN((u + 1) * slice_height, size[2]);
const u64 *C = self->slice[2] + lo;
slice_height = hi - lo;

<<Display stuff>>=
printf("Block %d: C[%d:%d] (slice_height=%d)\n", u, lo, hi, hi - lo);

<<Compute change of basis matrix>>=
struct matmul_table_t M, M_inv;
u32 rank = basis_change_matrix(C, 0, slice_height, &M, &M_inv);
if (rank != slice_height && verbose)
	printf("---> Rank deffect (%d)\n", slice_height - rank);
l = 64 - rank;

@ The technical part consists in computing $AM \join_\ell BM$. Several methods
are possible. We explore the complications below, incrementally. For now, let
us assume that the join has been computed, that solutions have been found, and
let us deal with the aftermath.

In [[local_result]], we have ``solutions'' of the $(AM, BM, CM)$ instance, i.e. 
triplets $(xM, yM, zM)$, so we multiply them by $M^{-1}$ to get the actual 
solutions.

<<Backport solutions>>=
struct solution_t *loc = local_result->solutions;
u32 n_sols = local_result->size;
for (u32 i = 0; i < n_sols; i++) {
	u64 x = gemv(loc[i].x, &M_inv);
	u64 y = gemv(loc[i].y, &M_inv);
	u64 z = gemv(loc[i].z, &M_inv);
	report_solution(self->result, x, y, z);
}

<<Display timing info>>=
double duration = wtime() - start;
printf("Block %d, total time: %.1fs\n", u, duration);
double volume = 9.5367431640625e-07 * (size[0] + size[1] + probes);
double rate = volume / duration;
printf("Join volume: %.1fM item (%.1fM item/s)\n", volume, rate);

@ \section{Join v0: naive matrix product and (very) naive sort-join}

What is described next is a naive, direct implementation. It has low performance,
but is simple and contains most of the ingredients nedded afterwards.

<<Compute $AM, BM$ and $CM$>>=
u64 *AM = self->scratch[0];
u64 *BM = self->scratch[1];
u64 *CM = self->scratch[2];
gemm(self->slice[0], AM, size[0], &M);
gemm(self->slice[1], BM, size[1], &M);
gemm(C, CM, slice_height, &M);

@ For now, we use the stupidest possible sort.

<<Forward declarations>>=
int cmp(const void *a_, const void *b_);

<<Auxiliary functions>>=
int cmp(const void *a_, const void *b_)
{
	u64 *a = (u64 *) a_;
	u64 *b = (u64 *) b_;
	return (*a > *b) - (*a < *b);
}

<<Forward declarations>>=
u32 merge_join(const u64 *a, u32 Na, const u64 *B, u32 Nb, u32 l, const struct hash_table_t *H, struct task_result_t *result);

<<Auxiliary functions>>=
u32 merge_join(const u64 *A, u32 Na, const u64 *B, u32 Nb, u32 l, const struct hash_table_t *H, struct task_result_t *result)
{
	u32 probes = 0;
	u32 i = 0;
	u32 j = 0;
	u64 mask = LEFT_MASK(l);
	while (i < Na && j < Nb) {
		u64 prefix_a = A[i] & mask;
		u64 prefix_b = B[j] & mask;
		if (prefix_a < prefix_b) {
			i += 1;
			continue;
		}
		if (prefix_a > prefix_b) {
			j += 1;
			continue;
		}
		/* Here, prefix_a == prefix_b */
		u32 j_0 = j;
		while (1) {
			probes++;
			u64 c = A[i] ^ B[j];
			if (hashtable_lookup(H, c))
				report_solution(result, A[i], B[j], c);
			j += 1;
			if (j < Nb && (B[j] & mask) == prefix_b)
				continue;
			i += 1;
			if (i < Na && (A[i] & mask) == prefix_a) {
				j = j_0;
				continue;
			}
			break;
		}
	}
	return probes;
}




@ \end{document}