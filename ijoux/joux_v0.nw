\documentclass{book}

\usepackage{geometry}
\usepackage{noweb}
\usepackage{amsmath,amsfonts,amssymb}
\usepackage{parskip}
\usepackage{xspace}
\usepackage{hyperref}

\newcommand{\join}{\bowtie}

\begin{document}

\setcounter{chapter}{2}
\chapter{The Iterated Joux Algorithm}


This file describes an implementation of the iterated Joux algorithm.  
The main function described in this file ``solves'' a (fine) task. 

<<*>>=
#include <math.h>
#include <stdlib.h>
#include <stdio.h>
#include <assert.h>
#include <err.h>
#include <sys/types.h>
#include <sys/stat.h>

#include "common.h"
#include "../quadratic/datastructures.h"
#include "../preprocessing/preprocessing.h"


<<Type definitions>>
<<Forward declarations>>
<<Auxiliary functions>>
<<The main function>>

@ \section{Processing Tasks}

<<The main function>>=
struct task_result_t * iterated_joux_task(const char *hash_dir, const char *slice_dir, struct jtask_id_t *task)
{
	static const bool task_verbose = false;
	static const bool block_verbose = false;
	struct task_result_t *result = result_init();
	double start = wtime();
	<<Load hash for $A, B$ from disk>>
	<<Load slices of $C$ from disk>>
	<<Prepare context>>
	if (task_verbose) {
		<<Display task info>>
	}
	struct C_record_t *slice = slices;
	u32 i = 0;
	while (1) {
		process_block_v0(&self, slice, block_verbose);
		i++;
		<<Advance to next slice; [[break]] when done>>
	}
	<<Release memory>>
	if (task_verbose) {
		<<Display task timing>>
	}
	return result;                           
}

<<Display task timing>>=
double task_duration = wtime() - start;
u32 n_coarse_tasks = 1 << (2 * task->k);
double total = task_duration * n_coarse_tasks * task->k2;
printf("Task duration: %.1f s\n", task_duration);
printf("Est. total time: %.3e h\n", total / 3600);

@ \section{Preparations}

Preparations include loading the data from disk. We expected a fair amount of 
data (say, 4Gb). Therefore this may take some time. In the future, we would
use this time to do something useful (try to precompute some matrices ?).

This utility function ought to be factored:

<<Forward declarations>>=
void * load_file(const char *filename, u64 *size_);

<<Auxiliary functions>>=
void * load_file(const char *filename, u64 *size_)
{
	struct stat infos;
	if (stat(filename, &infos))
		err(1, "fstat failed on %s", filename);
	u64 size = infos.st_size;
	void *content = aligned_alloc(64, size);
	if (content == NULL)
		err(1, "failed to allocate memory");
	FILE *f = fopen(filename, "r");
	if (f == NULL)
		err(1, "fopen failed (%s)", filename);
	u64 check = fread(content, 1, size, f);
	if (check != size)
		errx(1, "incomplete read %s", filename);
	fclose(f);
	*size_ = size;
	return content;
}

@ Loading $A$ and $B$ is easy: we just load the whole hash file.

<<Load hash for $A, B$ from disk>>=
u64 *L[2];
u64 *scratch[2];
u64 size[2];
for (u32 kind = 0;  kind < 2; kind++) {
	<<Determine [[filename]]>>
	L[kind] = load_file(filename, &size[kind]);
	assert((size[kind] % 8) == 0);
	size[kind] /= 8;
	<<Allocate scratch space>>
}

@ This ought to be factored: it is not DRY wrt quadratic.

<<Determine [[filename]]>>=
char filename[255];
char *kind_name[3] = {"foo", "bar", "foobar"};
sprintf(filename, "%s/%s.%03x", hash_dir, kind_name[kind], task->idx[kind]);

@ Loading $C$ is a bit different, because the slice of $C$ we are concerned
with is contained in a slice file.

<<Load slices of $C$ from disk>>=
char filename[255];
sprintf(filename, "%s/%03x-%05x", slice_dir, task->idx[2], task->r);
struct C_record_t * slices;
u64 slices_size;
slices = load_file(filename, &slices_size);

@ When allocating the memory, we enforce alignement on a 64-byte boundary  (the
size of a cache line on most CPUs). In addition, this allows aligned  access
for all possible sizes, including 256-bit registers. For this, we use
[[aligned_alloc]], available in \textsf{C11}, or an equivalent wrapper.

<<Allocate scratch space>>=
scratch[kind] = aligned_alloc(64, 8 * size[kind]);
if (scratch[kind] == NULL)
	err(1, "failed to allocate memory");

<<Release memory>>=
for (u32 kind = 0;  kind < 2; kind++) {
	free(L[kind]);
	free(scratch[kind]);
}
free(slices);

@ We define a [[context]] to pass all arguments to subfunctions.

<<Type definitions>>=
struct context_t {
	struct task_result_t *result;
	u64 *L[2];
	u64 *scratch[2];
	u32 size[2];
};

<<Prepare context>>=
struct context_t self;
self.result = result;
for (u32 i = 0; i < 2; i++) {
	self.size[i] = size[i];
	self.L[i] = L[i];
	self.scratch[i] = scratch[i];
}

@ If requested, we are capable of displaying some information.

<<Display task info>>=
	/* task-level */
printf("Task: |A|=%" PRId64 ",  |B|=%" PRId64 "\n", size[0], size[1]);
double mbytes = (slices_size + 8 * (size[0] + size[1])) / 1048576.0;
printf("Task volume : %.1fMbyte\n", mbytes);
double logsols = log2(1.5 * (size[0]) + log2(size[1]));
printf("Est. #solutions : %g\n", pow(2, logsols - 64));


@ Advancing to the next slice is tricky, because slices are variable-length.

<<Advance to next slice; [[break]] when done>>=
u32 n = slice->n;
u8 *ptr = (u8 *) slice;
ptr += sizeof(struct C_record_t) + sizeof(u64) * n;
u8 *end = ((u8 *) slices) + slices_size;
if (ptr >= end)
	break;
slice = (struct C_record_t *) ptr;

@ \section{Processing Slices}

We are ready for the big function. We compute the matrix $M$, then
for each pair $(x, y) \in AM \join BM$, we check whether $x ^ y \in CM$. Here,
$CM$ is very small. For now we get away with using a simple hash table with
linear probing.

<<Forward declarations>>=
void process_block_v0(struct context_t *self, const struct C_record_t *slice, bool verbose);

<<Auxiliary functions>>=
void process_block_v0(struct context_t *self, const struct C_record_t *slice, bool verbose)
{
	double start = wtime();
	struct task_result_t * local_result = result_init();
	<<Compute $AM, BM$>>
	qsort(AM, self->size[0], sizeof(u64), cmp);
	qsort(BM, self->size[1], sizeof(u64), cmp);
	struct hash_table_t *H = hashtable_build(slice->CM, 0, slice->n);
	u32 probes = merge_join(AM, self->size[0], BM, self->size[1], slice->l, H, local_result);
	hashtable_free(H);
	<<Backport solutions>>
	result_free(local_result);
	if (verbose) {
		<<Display timing info>>
	}
}

@ The technical part consists in computing $AM \join_\ell BM$. Several methods
are possible. We explore the complications below, incrementally. For now, let
us assume that the join has been computed, that solutions have been found, and
let us deal with the aftermath.

In [[local_result]], we have ``solutions'' of the $(AM, BM, CM)$ instance, i.e. 
triplets $(xM, yM, zM)$, so we multiply them by $M^{-1}$ to get the actual 
solutions.

Because there are few such multiplications (we expect roughly $\ell$), we use
a naive vector-matrix product.

<<Forward declarations>>=
u64 naive_gemv(u64 x, const u64 *M);

<<Auxiliary functions>>=
u64 naive_gemv(u64 x, const u64 *M)
{
	u64 y = 0;
	for (u32 i = 0; i < 64; i++) {
		u64 bit = (x >> i) & 1;
		u64 mask = (u64) (- ((i64) bit));
		y ^= M[i] & mask;
	}
	return y;
}


<<Backport solutions>>=
struct solution_t *loc = local_result->solutions;
u32 n_sols = local_result->size;
for (u32 i = 0; i < n_sols; i++) {
	u64 x = naive_gemv(loc[i].x, slice->Minv);
	u64 y = naive_gemv(loc[i].y, slice->Minv);
	u64 z = naive_gemv(loc[i].z, slice->Minv);
	report_solution(self->result, x, y, z);
}

<<Display timing info>>=
double duration = wtime() - start;
printf("Block, total time: %.1fs\n", duration);
double volume = 9.5367431640625e-07 * (self->size[0] + self->size[1] + probes);
double rate = volume / duration;
printf("Join volume: %.1fM item (%.1fM item/s)\n", volume, rate);

@ \section{Join v0: naive matrix product and (very) naive sort-join}

What is described next is a naive, direct implementation. We first do the
matrix product, then sort, then merge-join. This has low performance,
especially because the qsort function has a lot of overhead. But this is
simple and contains most of the ingredients nedded afterwards.

To perform the fast matrix-matrix product, we use a precomputed table inspired
by the four russians algorithm.

In our datastructure, [[table[i]]] contains all the 256 possible linear combinations
of rows $[8i: 8(i+1)]$. We use a gray code to compute these more efficiently. At the 
$j$-th step, we XOR the $k$-th row of the block of 8, where $k$ is the $2$-valuation of $j$.
The $j$-th word in gray code order is [[j ^ (j >> 1)]].

<<Type definitions>>=
struct matmul_table_t {
	u64 tables[8][256] __attribute__((aligned(64)));
};

<<Auxiliary functions>>=
static inline u64 gemv(u64 x, const struct matmul_table_t * M)
{
	u64 r = 0;
	r ^= M->tables[0][x & 0x00ff];
	r ^= M->tables[1][(x >> 8) & 0x00ff];
	r ^= M->tables[2][(x >> 16) & 0x00ff];
	r ^= M->tables[3][(x >> 24) & 0x00ff];
	r ^= M->tables[4][(x >> 32) & 0x00ff];
	r ^= M->tables[5][(x >> 40) & 0x00ff];
	r ^= M->tables[6][(x >> 48) & 0x00ff];
	r ^= M->tables[7][(x >> 56) & 0x00ff];
	return r;
}

<<Auxiliary functions>>=
void matmul_init(const u64 *M, struct matmul_table_t* T)
{
	#pragma omp parallel for schedule(static)
	for (u32 i = 0; i < 8; i++) {
		u32 lo = i * 8;
		T->tables[i][0] = 0;
		u64 tmp = 0;
		for (u32 j = 1; j < 256; j++) {
			u32 k =  __builtin_ctzll(j);
			tmp ^= M[lo + k];
			T->tables[i][j ^ (j >> 1)] = tmp;
		}
	}
}

<<Auxiliary functions>>=
static inline void gemm(const u64 *IN, u64 *OUT, u32 n, const struct matmul_table_t *M)
{
	for (u32 i = 0; i < n; i++)
		OUT[i] = gemv(IN[i], M);
}


<<Forward declarations>>=
static inline u64 gemv(u64 x, const struct matmul_table_t * M);
void matmul_init(const u64 *M, struct matmul_table_t* T);
static inline void gemm(const u64 *IN, u64 *OUT, u32 n, const struct matmul_table_t *M);

@ Now we have everything we need to do the linear algebra.

<<Compute $AM, BM$>>=
struct matmul_table_t M;
u64 *AM = self->scratch[0];
u64 *BM = self->scratch[1];
matmul_init(slice->M, &M);
gemm(self->L[0], AM, self->size[0], &M);
gemm(self->L[1], BM, self->size[1], &M);

@ For now, we use the stupidest possible sort.

<<Forward declarations>>=
int cmp(const void *a_, const void *b_);

<<Auxiliary functions>>=
int cmp(const void *a_, const void *b_)
{
	u64 *a = (u64 *) a_;
	u64 *b = (u64 *) b_;
	return (*a > *b) - (*a < *b);
}

<<Forward declarations>>=
u32 merge_join(const u64 *a, u32 Na, const u64 *B, u32 Nb, u32 l, const struct hash_table_t *H, struct task_result_t *result);

<<Auxiliary functions>>=
u32 merge_join(const u64 *A, u32 Na, const u64 *B, u32 Nb, u32 l, const struct hash_table_t *H, struct task_result_t *result)
{
	u32 probes = 0;
	u32 i = 0;
	u32 j = 0;
	u64 mask = LEFT_MASK(l);
	while (i < Na && j < Nb) {
		u64 prefix_a = A[i] & mask;
		u64 prefix_b = B[j] & mask;
		if (prefix_a < prefix_b) {
			i += 1;
			continue;
		}
		if (prefix_a > prefix_b) {
			j += 1;
			continue;
		}
		/* Here, prefix_a == prefix_b */
		u32 j_0 = j;
		while (1) {
			probes++;
			u64 c = A[i] ^ B[j];
			if (hashtable_lookup(H, c))
				report_solution(result, A[i], B[j], c);
			j += 1;
			if (j < Nb && (B[j] & mask) == prefix_b)
				continue;
			i += 1;
			if (i < Na && (A[i] & mask) == prefix_a) {
				j = j_0;
				continue;
			}
			break;
		}
	}
	return probes;
}

@ \end{document}