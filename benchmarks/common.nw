\documentclass{book}

\usepackage[a4paper]{geometry}
\usepackage{noweb}
\usepackage{amsmath,amsfonts,amssymb}
\usepackage{parskip}
\usepackage{xspace}
\usepackage{hyperref}

\usepackage{tikz}
\usetikzlibrary{decorations.pathreplacing}


\begin{document}

<<common.h>>=
#include <inttypes.h>
#include <stdbool.h>

<<Type definitions>>
<<Function declarations>>

<<Type definitions>>=
typedef int8_t   i8;
typedef int16_t  i16;
typedef int32_t  i32;
typedef int64_t  i64;
typedef uint8_t  u8;
typedef uint16_t u16;
typedef uint32_t u32;
typedef uint64_t u64;


<<Function declarations>>=
void *aligned_alloc(size_t alignment, size_t size);
double wtime();
#ifdef __i386__
u64 ticks();
#endif

#define MAX(x, y) (((x) < (y)) ? (y) : (x))
#define MIN(x, y) (((x) < (y)) ? (x) : (y))

static inline u64 LEFT_MASK(u32 n)
{
	return ~((1ull << (64 - n)) - 1);
}

static inline u64 RIGHT_MASK(u32 n)
{
	return (1ull << n) - 1;
}

<<*>>=
#define _POSIX_C_SOURCE 200112L
#include <stdio.h>
#include <sys/time.h>
#include <stdlib.h>
#include <err.h>
#include "common.h"


void *aligned_alloc(size_t alignment, size_t size)
{
        void *p;
        // fprintf(stderr, "Allocating %zd\n", size);
        int rc = posix_memalign(&p, alignment, size);
        if (rc != 0) {
                warnx("posix_memaligned (code %d)", rc);
                return NULL;
        }
        return p;
}


double wtime()
{
	struct timeval ts;
	gettimeofday(&ts, NULL);
	return (double)ts.tv_sec + ts.tv_usec / 1E6;
}

#ifdef __i386__
u64 ticks()
{
	u64 low, high;
	__asm__ volatile ("rdtsc" : "=a" (low), "=d" (high));
	return (high << 32) | low;
}
#endif

@ We need a good PRNG...

<<Function declarations>>=
void RC4_keysetup(u8 *S, u64 key);
void RC4_stream(u8 *S, u8 *out, u64 n);

<<*>>=
void RC4_keysetup(u8 *S, u64 key)
{
        for (int i = 0; i < 256; i++)
                S[i] = i;
        // u8 k = key;
        u8 j = 0;
        for (int i = 0; i < 256; i++) {
                j = j + S[i] + key;
                // k = (k * key + 11) % 257;
                u8 x = S[i];
                S[i] = S[j];
                S[j] = x;
        }
}

void RC4_stream(u8 *S, u8 *out, u64 n)
{
        u8 i = 0, j = 0;
        for (u64 k = 0; k < n; k++) {
                i += 1;
                j += S[i];
                u8 x = S[i];
                S[i] = S[j];
                S[j] = x;
                out[k] = S[(S[i] + S[j]) & 0x00ff];
        }
}


@ \end{document}