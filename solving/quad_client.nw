\documentclass{book}

\usepackage[a4paper,vmargin=1in]{geometry}
\usepackage{noweb}
\usepackage{amsmath,amsfonts,amssymb}
\usepackage{parskip}
\usepackage{xspace}
\usepackage{hyperref}

\newcommand{\nanomsg}{\textsf{nanomsg}\xspace}

\begin{document}

\setcounter{chapter}{4}
\chapter{A client for the Quadratic Algorithm}

\section{Introduction}

This client feeds tasks to the quadratic algorithm. 
Familiarity with the server and the communication protocol is assumed.

The client has the usual structure :

<<*>>=
<<Header files to include>>
<<The main program>>

<<Header files to include>>=
#define _POSIX_C_SOURCE 200112L 
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <limits.h>
#include <getopt.h>
#include <string.h>
#include <err.h>
#include <nanomsg/nn.h>
#include <nanomsg/reqrep.h>

#include "common.h"
#include "server.h"

/* in quadratic.c */
struct task_result_t * quadratic_task(const char *hash_dir, struct task_id_t *task);


@

<<The main program>>=
int main(int argc, char **argv)
{
	<<Process the command line>>
	<<Initialize networking>>
	<<Main client loop>>
	<<Exit cleanly>>
}

@ The only command-line argument is the address of the server.

<<Process the command line>>=
struct option longopts[4] = {
	{"server-address", required_argument, NULL, 'a'},
	{"partitioning-bits", required_argument, NULL, 'k'},
	{"hash-dir", required_argument, NULL, 'h'},
	{NULL, 0, NULL, 0}
};
char *server_address = NULL;
char *hash_dir = NULL;
i32 k = -1;
char ch;
while ((ch = getopt_long(argc, argv, "", longopts, NULL)) != -1) {
	switch (ch) {
	case 'a':
		server_address = optarg;
		break;
	case 'k':
		k = atoi(optarg);
		break;
	case 'h':
		hash_dir = optarg;
		break;
	default:
		errx(1, "Unknown option\n");
	}
}
if (server_address == NULL)
	errx(1, "missing required option --server-address");
if (k < 0)
	errx(1, "missing required option --partitioning bits");
if (hash_dir == NULL)
	errx(1, "missing required option --hash-dir");


@ Because we are in the non-static part of the infrastructure, we do not
\emph{bind} our \nanomsg socket to a network address, but we \emph{connect} it to
the address of the server. While the server has a [[NN_REP]] socket, we have
an [[NN_REQ]].

<<Initialize networking>>=
int socket = nn_socket(AF_SP, NN_REQ);
if (socket < 0)
	errx(1, "nn_socket : %s\n", nn_strerror(nn_errno()));
if (nn_connect(socket, server_address) < 0)
	errx(1, "nn_bind : %s\n", nn_strerror(nn_errno()));


@ We are now ready for the client loop: ask for work, do it, send
result.

<<Main client loop>>=
<<Send ``Hello'' message>>
while (1) {
	<<Wait for task message; set [[task_msg]] and [[task_msg_size]]>>
	if (task_msg->id < 0)
		break;
	printf("got id=%d\n", task_msg->id);
	<<Run the task>>
	<<Send back result message>>
	<<Release [[result]] and both messages>>
}

@ Running the task is the simple part. The [[work]] function is responsible
for giving us back the result. The [[result]] will be [[free]]d later.

<<Run the task>>=
u32 problem_size = 1 << k;
u32 id = task_msg->id;
u32 i = id / problem_size;
u32 j = id % problem_size;
struct task_id_t task;
task.k = k;
task.idx[0] = i;
task.idx[1] = j;
task.idx[2] = i ^ j;
printf("quadratic task (%d, %d)\n", i, j);
struct task_result_t *result = quadratic_task(hash_dir, &task);


@ The ``Hello" message is the first that a client should send. It contains the
hostname.

<<Send ``Hello'' message>>=
struct task_msg_t *hello = malloc(sizeof(struct task_msg_t) + HOST_NAME_MAX);
hello->id = -1;
if (gethostname(hello->hostname, HOST_NAME_MAX))
	err(1, "gethostname failed");
hello->hostname_length = strlen(hello->hostname) + 1;
int hello_size = sizeof(struct task_msg_t) + hello->hostname_length;
nn_send(socket, hello, hello_size, 0);
free(hello);

@ Receiving the (variable-length) task message is similar to what happens in the server.

<<Wait for task message; set [[task_msg]] and [[task_msg_size]]>>=
struct task_msg_t *task_msg = NULL;
int task_msg_size = nn_recv(socket, &task_msg, NN_MSG, 0);
if (task_msg_size < 0)
	errx(1, "nn_recv : %s\n", nn_strerror(nn_errno()));


<<Release [[result]] and both messages>>=
free(result->solutions);
free(result);
free(response_msg);
nn_freemsg(task_msg);


@ To return the result to the server, the client must prepare a message encapsulating the result.

<<Send back result message>>=
u32 result_size = 3 * sizeof(u64) * result->size;
u32 response_size = task_msg_size + sizeof(int) + result_size;
char *response_msg = malloc(response_size);
memcpy(response_msg, task_msg, task_msg_size);
memcpy(response_msg + task_msg_size, &result_size, sizeof(u32));
memcpy(response_msg + task_msg_size + sizeof(u32), result->solutions, result_size);
if (nn_send(socket, response_msg, response_size, 0) < 0)
	errx(1, "nn_send : %s\n", nn_strerror(nn_errno()));


<<Exit cleanly>>=
printf("Bye.\n");
if (nn_close (socket) < 0)
	errx(1, "nn_close : %s\n", nn_strerror(nn_errno()));
return(EXIT_SUCCESS);

@ \end{document}