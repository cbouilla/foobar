\documentclass{book}

\usepackage{geometry}
\usepackage{noweb}
\usepackage{amsmath,amsfonts,amssymb}
\usepackage{parskip}
\usepackage{xspace}
\usepackage{hyperref}

\begin{document}

\setcounter{chapter}{5}
\chapter{Peeking Through Solutions}


This program demonstrates the ability to read the journal file during the
course of a long-running computation. This program does not do much; it just
computes the total size of all the tasks' results. The program has the usual
structure:

<<*>>=
#define _XOPEN_SOURCE 500
#include <stdio.h>
#include <stdlib.h>
#include <limits.h>
#include <getopt.h>
#include <err.h>

#include "common.h"
#include "server.h"

int main(int argc, char **argv)
{
        <<Process the command line>>
        <<Parse the journal file>>
        <<Report>>
}

@ Each task result is read from the journal, and the following statistics are accumulated.

<<Accumulate statistics>>=
total_time += task.completion_time - task.start_time;
total_result_size += result.size;
n_tasks++;

@ The only command-line argument is the name of the journal file.

<<Process the command line>>=
if (argc != 2)
	errx(1, "missing journal filename");
char *journal_filename = argv[1];

@ Now the ``meat'', so to say, of the program. We open the journal and read
it. This is not very DRY with respect to the code of the server. Here, we
ignore the actual content of task's payloads.

<<Parse the journal file>>=
u64 total_result_size = 0;
double total_time = 0.0;
u32 n_tasks = 0;
FILE *f = fopen(journal_filename, "r");
if (!f)
	err(1, "opening %s", journal_filename);
while (1) {
	<<Read a [[task_msg_t]]; if [[EOF]] then exit the loop>>
	<<Read the [[hostname]]>>
	<<Read a [[result_t]] and skip the payload>>
	<<Accumulate statistics>>
}
fclose(f);


<<Read a [[task_msg_t]]; if [[EOF]] then exit the loop>>=
struct task_msg_t task;
if (fread(&task, sizeof(task), 1, f) != 1) {
	if (feof(f))
		break;
	else
		err(1, "reading journal file");
}

<<Read the [[hostname]]>>=
char hostname[HOST_NAME_MAX];
if (task.hostname_length > HOST_NAME_MAX)
	errx(1, "hostname too long");
size_t tmp = fread(hostname, 1, task.hostname_length, f);
if (tmp != task.hostname_length)
	err(1, "reading hostname");

<<Read a [[result_t]] and skip the payload>>=
struct result_t result;
if (fread(&result, sizeof(result), 1, f) != 1)
	err(1, "reading journal file (result)");
if (fseek(f, result.size, SEEK_CUR))
	err(1, "fseek, skipping over payload");


<<Report>>=
fprintf(stderr, "Read %d tasks.\n", n_tasks);
fprintf(stderr, "%.1fs s in computation.\n", total_time);
fprintf(stderr, "%" PRId64 " bytes of results.\n", total_result_size);
return(EXIT_SUCCESS);

@
\end{document}

