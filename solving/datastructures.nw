\documentclass{book}

\usepackage[a4paper,vmargin=1in]{geometry}
\usepackage{noweb}
\usepackage{amsmath,amsfonts,amssymb}
\usepackage{parskip}
\usepackage{xspace}
\usepackage{hyperref}

\begin{document}
\setcounter{chapter}{1}
\chapter{Datastructures}

This chapter describes data structures with the following specification. 
$\mathcal{D}$ holds a small set of [[uint64_t]]. There will be many 
\emph{trials} ``does $x \in \mathcal{D}$?''. In $99.99999\%$ of the case, the 
answer is NO. So, the datastructure is optimized to answer as quickly as 
possible in this case. False positives are allowed (i.e. giving the answer YES 
while it is in fact NO), but false negatives are forbidden.

A (more expensive) deterministic check is performed when the answer is YES, so 
the rate of false positives has to be kept low.

This is akin to a bloom filter, but bloom filters are too slow for our purposes.

<<*>>=
#define _XOPEN_SOURCE /* mrand48 */
#include <stdlib.h>
#include <err.h>
#include <stdio.h>
#include "datastructures.h"
<<Public functions>>

<<datastructures.h>>=
#include "../types.h"
<<Type definitions>>
<<Constants>>
<<Function declarations>>

@ \section{Linear Hashing}

TODO. Consider doing it ``Ã  la Knuth'', i.e. get rid of the power-of-two thing.

This section describes a hash table using linear probing (cf. Knuth). 
The size of the table is a power of two. We assume that 0 does not belong to the hash 
table, because 0 denotes empty cells. This is enforced during hash table build.
The hash table is fully described by a correctly initialized array of 64-bits 
integers and its size.

<<Type definitions>>=
struct hash_table_t {
	u64 mask;
	u64 *H;    // of size mask + 1
};

<<Function declarations>>=
u32 hashtable_size(u32 n_items);
struct hash_table_t * hashtable_build(u64 * const L, u32 lo, u32 hi);
void hashtable_free(struct hash_table_t *s);


@ Probing the hash table is simple... But will most certainly cause branch 
mispredictions, as the number of iterations of the [[while]] loop is impredictable. 
Because this has to be reeeaaaally fast, it is defined in the [[.h]] file to allow inlining.

<<Function declarations>>=
static inline bool hashtable_lookup(const struct hash_table_t *s, const u64 x)
{
	u64 h = x & s->mask;
	u64 probe = s->H[h];
	while (probe) {
		if (probe == x)
			return true;
		h = (h + 1) & s->mask;
		probe = s->H[h];
	}
	return false;
}

<<Public functions>>=
void hashtable_free(struct hash_table_t *s)
{
	free(s->H);
	free(s);
}


@ Building the hash table is not much more complicated, and in our case it is static. 
The size of the hash table then has to be chosen at build time. We choose it so that 
the fill ratio is less than 0.25. This ensures that probing stops after less than 
$\approx 2.5$ probes. To enable the use of efficient arithmetic, we use a table size 
which is a power of two. We thus determine the smallest power of two larger that $4n$. 
This gives satisfactory results, and it gets even better when the fill ratio goes down 
to $1/8$.

<<Public functions>>=
u32 hashtable_size(u32 n_items)
{
	u32 tmp = 4 * n_items + 1;
	u32 i = 0;
	while (tmp) {
		tmp >>= 1;
		i++;
	}
	return 1 << i;	
}

@ The function takes a sequence $L$ of 64-bits integers and returns a hash table. 

<<Public functions>>=
struct hash_table_t * hashtable_build(u64 * const L, u32 lo, u32 hi)
{
	struct hash_table_t *s = malloc(sizeof(*s));
	u32 size = hashtable_size(hi - lo);
	<<Initialize empty hash table>>
	for (u32 i = lo; i < hi; i++) {
		if (L[i] == 0)
			errx(1, "cannot insert 0 in hash table");
		<<insert [[L[i]]] into the hash table>>
	}
	s->H = H;
	s->mask = mask;
	return s;
}


<<Initialize empty hash table>>=
u64 mask = ((u64) size) - 1;
u64 *H = malloc(size * sizeof(*H));
if (H == NULL)
	err(1, "cannot allocate linear hash table");
for (u32 i = 0; i < size; i++)
	H[i] = 0;

@ Insertion is similar to probing: we find the first possible empty space, and 
we put the value there.

<<insert [[L[i]]] into the hash table>>=
u64 h = L[i] & mask;
while (H[h] != 0)
	h = (h + 1) & mask;
H[h] = L[i];


@ For now... let's use this as our final data structure.

\section{Cuckoo Hashing}

We use a variant of cuckoo hashing with a single table, using two \emph{fixed} 
hash functions. As a result, building the table may fail (in normal cuckoo 
hashing, should this occur, the hash functions are discarded and replaced --- we 
can't afford this). The [[cuckoo_build]] function returns [NULL] in case of failure.
 
Our table fits into L1 cache. We use a single array of [[u32]] and store only the 
32 lowest-significant bits. This is enough to ensure a small rate of false positives.

<<Constants>>=
#define CUCKOO_MASK 0xfff

<<Function declarations>>=
u32 * cuckoo_build(u64 * const L, u32 lo, u32 hi);

@ The big advantage of cuckoo hashing is that probing follow a fixed control flow. 
This makes it vectorizable.

<<Function declarations>>=
static inline bool cuckoo_lookup(const u32 *H, const u64 x)
{
	const u32 x_low = x;
	const u32 h1 = x & CUCKOO_MASK;
	const u32 h2 = (x >> 16) & CUCKOO_MASK;
	const u32 probe1 = H[h1];
	const u32 probe2 = H[h2];
	return (probe1 == x_low) || (probe2 == x_low);
}

@ The array os disposed of using [[free]], and built as follows.

<<Public functions>>=
u32 * cuckoo_build(u64 * const L, u32 lo, u32 hi)
{
	u32 *H = malloc(sizeof(*H) * (CUCKOO_MASK + 1));
	if (H == NULL)
		err(1, "Cannot alloc cuckoo table");
	for (u32 i = 0; i < CUCKOO_MASK + 1; i++)
		H[i] = 0;
	for (u32 i = lo; i < hi; i++) {
		if (L[i] == 0)
			errx(1, "cannot insert 0 in hash table");
		<<insert [[L[i]]] into the cuckoo table; return [[NULL]] in case of failure>>
	}
	return H;
}


<<insert [[L[i]]] into the cuckoo table; return [[NULL]] in case of failure>>=
u32 x = L[i];
u32 loops = 0;
bool ok = false;
while (!ok && loops < 1000) {
	<<Try to insert $x$ in side 0; in case of success, [[break]]>>
	<<Try to insert $x$ in side 1; in case of success, [[break]]>>
	<<Choose a side at random, swap current value with $x$>>
	ok = false;
	loops++;
}
if (!ok) {
	free(H);
	return NULL;
}

<<Try to insert $x$ in side 0; in case of success, [[break]]>>=
u32 h0 = x & CUCKOO_MASK;
if (H[h0] == 0 || H[h0] == x) {
	H[h0] = x;
	ok = true;
	break;
}

<<Try to insert $x$ in side 1; in case of success, [[break]]>>=
u32 h1 = (x >> 16) & CUCKOO_MASK;
if (H[h1] == 0 || H[h1] == x) {
	H[h1] = x;
	ok = true;
	break;
}

<<Choose a side at random, swap current value with $x$>>=
u32 h = (mrand48() & 1) ? h0 : h1;
u32 y = H[h];
H[h] = x;
x = y;

@ \end{document}