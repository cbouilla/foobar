\documentclass{book}
\usepackage{noweb}

\usepackage{amsmath,amsfonts,amssymb}
\usepackage{textcomp}
\usepackage{parskip}
\usepackage{geometry}
\usepackage{xspace}
\usepackage{hyperref}

\def\noweb{{\tt noweb\/}}
\newcommand{\join}{\bowtie}

\newcommand{\ZMQ}{\textsf{$\varnothing$MQ}\xspace}
\newcommand{\NN}{\textsf{nanomsg}\xspace}
\newcommand{\MPI}{\textsf{MPI}\xspace}
\newcommand{\OMP}{\textsf{OpenMP}\xspace}

\begin{document}

\setcounter{chapter}{3}
\chapter{Sorter}

This program sorts split dictionnary files, which are sequences of contiguous [[struct dict_t]] records.
It reads a dictionnary file, sorts it by hash, and rewrites it.

<<*>>=
<<Header files to include>>
<<Auxiliary functions>>
<<The main program>>

@ We need the usual standard headers.

<<Header files to include>>=
#define _XOPEN_SOURCE 500   /* strdup */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <err.h>
#include <sys/types.h>
#include <sys/stat.h>

#include "preprocessing.h"

<<The main program>>=
int main(int argc, char **argv)
{
	<<Process the command line>>
	<<Load the dictionnary in [[dictionnary]]>>
	<<Sort [[dictionnary]] by increasing hash>>
	<<Write [[dictionnary]] to the [[.sorted]] file>>
	exit(EXIT_SUCCESS);
}

@ The only accepted command-line argument is the name of file to sort.

<<Process the command line>>=
if (argc < 2)
	errx(1, "missing argument: FILENAME");
char *in_filename = argv[1];

@ To read the dictionnaty file in memory, we first query its size, then
allocate memory accordingly, then finally read it in the allocated space.

<<Load the dictionnary in [[dictionnary]]>>=
struct stat infos;
if (stat(in_filename, &infos))
	err(1, "fstat");
struct dict_t *dictionnary = malloc(infos.st_size);
if (dictionnary == NULL)
	err(1, "failed to allocate memory");
FILE *f_in = fopen(in_filename, "r");
if (f_in == NULL)
	err(1, "fopen failed");
size_t check = fread(dictionnary, 1, infos.st_size, f_in);
if ((check != (size_t) infos.st_size) || ferror(f_in))
	err(1, "fread : read %zd, expected %zd", check, infos.st_size);
if (fclose(f_in))
	err(1, "fclose %s", in_filename);

@ To actually perform the sort, we use the standard [[qsort]] function. It is
not the fastest possible solution, but it is the simplest. We have to provide
a comparison function for [[qsort]] and extra care has to be taken, because we
cannot just substract the [[u64]]. This is an extra source of inefficiency.

<<Auxiliary functions>>=
int cmp(const void *a_, const void *b_)
{
	struct dict_t *a = (struct dict_t *) a_;
	struct dict_t *b = (struct dict_t *) b_;
	return (a->hash > b->hash) - (a->hash < b->hash);
}

<<Sort [[dictionnary]] by increasing hash>>=
int n_entries = infos.st_size / sizeof(*dictionnary);
qsort(dictionnary, n_entries, sizeof(*dictionnary), cmp);

@ Once the dictionnary has been sorted in memory, it has to be written back
down to the file system. To avoid erasing the original file, we write it down
to \emph{another} file.

<<Write [[dictionnary]] to the [[.sorted]] file>>=
char *out_filename = strdup(in_filename);
memcpy(out_filename + strlen(out_filename) - 8, "sorted", 7);
FILE *f_out = fopen(out_filename, "w");
if (f_out == NULL)
	err(1, "cannot create output file %s", out_filename);
check = fwrite(dictionnary, sizeof(*dictionnary), n_entries, f_out);
if (check != (size_t) n_entries)
	err(1, "fwrite inconsistensy %zd vs %d", check, n_entries);
if (fclose(f_out))
	err(1, "fclose %s", out_filename);

@

\end{document}
