\documentclass{book}
\usepackage{noweb}

\usepackage{amsmath,amsfonts,amssymb}
\usepackage{textcomp}
\usepackage{parskip}
\usepackage{geometry}
\usepackage{xspace}
\usepackage{hyperref}

\begin{document}
\setcounter{chapter}{1}
\chapter{Hasher}

This file describes a shared function that computes the hash associated to a
given preimage. This code is embedded into the (modified) code that runs on
the miner. We use \textsf{OpenSSL}'s implementation of \textsf{SHA256}.

The miner produces (counter, nonce) pairs (\emph{preimages} in our parlance). 
The preprocessing step builds \emph{dictionnaries} of hash $\rightarrow$ preimage.

Given a [[struct preimage_t]], we compute the full hash (and check its validity). 
Given the full hash we extract a 64-bit substring, known to be uniformly distributed, 
as well as the partitionning key. The full hash fits into an array of 
$8 \times [[u32]]$.

The public interface is thus:

<<hasher.h>>=
#include <preprocessing.h>

extern bool compute_full_hash(int kind, struct preimage_t *preimage, u32 *hash);
static inline u64 extract_partial_hash(u32 *hash) {
	<<Return partial hash>>
}
static inline u64 extract_partitioning_key(int k, u32 *hash) {
	<<Return partitionning key>>
}


@ The smallest functions are [[static inline]] for speed. Now we come to the implementation.

<<*>>=
#include <string.h>
#include "sha256.h"
#include "hasher.h"

bool compute_full_hash(int kind, struct preimage_t *preimage, u32 *hash)
{
	char buffer[80];
	<<Assemble plaintext block>>
	<<Compute full hash of plaintext block>>
	<<Return [[true]] if hash is valid>>
}

@ To hash a preimage, we must first build the 80-byte ``plaintext block'', i.e. the input of the hash function.

<<Assemble plaintext block>>=
static const char *TEMPLATE[3] = {
"FOO-0x0000000000000000                                                          ",
"BAR-0x0000000000000000                                                          ",
"FOOBAR-0x0000000000000000                                                       "
};
static const u8 NIBBLE[16] = {48, 49, 50, 51, 52, 53, 54, 55, 
	                        56, 57, 65, 66, 67, 68, 69, 70};
<<Start from the template given by [[kind]]>>
<<Write down [[counter]] as ASCII hexadecimal>>
<<Write the (byteswapped) [[nonce]] at the end>>

@ Let's do this.

<<Start from the template given by [[kind]]>>=
memcpy(buffer, TEMPLATE[kind], 80);
	
<<Write down [[counter]] as ASCII hexadecimal>>=
u64 counter = preimage->counter;
int j = (kind == 2) ? 25 : 22;
while (counter > 0) {
	u8 nibble = counter & 0x000f;
	counter >>= 4;
	buffer[j] = NIBBLE[nibble];
	j--;
}

<<Write the (byteswapped) [[nonce]] at the end>>=
u32 *block = (u32 *) buffer;
block[19] = __builtin_bswap32(preimage->nonce);

@ At this stage, the plaintext block is ready. We apply the \textsf{SHA256}
hash function \emph{twice}, and that's it.

<<Compute full hash of plaintext block>>=
u8 md[32];
SHA256((u8 *) block, 80, md);
SHA256((u8 *) md, 32, (u8 *) hash);


@ A priori, the nonces are valid at difficulty 33. This means that the top 33
bits of the hash must be zero. 

<<Return [[true]] if hash is valid>>=
return (hash[7] == 0x00000000) && ((hash[6] & 0x80000000) == 0x0000000000);


@ We extract 64 bits of the hash from [[hash[5]]] and [[hash[6]]], excluding
the most-significant bit of [[hash[6]]] which is always zero. We replace it
with the most-significant bit of [[hash[4]]].

<<Return partial hash>>=
return (((u64) hash[5]) << 32) ^ hash[6] ^ (hash[4] & 0x80000000);

@ The partitioning key is taken from the high-order bits of [[hash[4]]].

<<Return partitionning key>>=
return (hash[4] & 0x7fffffff) >> (31 - k);

@

\end{document}
