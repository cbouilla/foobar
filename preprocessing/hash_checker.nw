\documentclass{book}
\usepackage{noweb}
\noweboptions{webnumbering}

\usepackage{amsmath,amsfonts,amssymb}
\usepackage{textcomp}
\usepackage{parskip}
\usepackage{geometry}
\usepackage{xspace}
\usepackage{hyperref}

\begin{document}

\setcounter{chapter}{5}
\chapter{Hash File Checker}

This program checks that a \textbf{hash file} is actually sorted and without duplicates.

<<*>>=
<<Header files to include>>
<<The main program>>

@ We need the usual standard headers.

<<Header files to include>>=
#include <stdio.h>
#include <stdlib.h>
#include <err.h>

#include "preprocessing.h"

<<The main program>>=
int main(int argc, char **argv)
{
	<<Open input file and allocate [[buffer]]>>
	u64 prev = 0;
	u32 processed = 0, size = 0;
	while (!feof(f)) {
		<<Fill [[buffer]] from input file>>
		<<Check that [[buffer]] is in-order and duplicate-free>>
	}
	fclose(f);
	exit(EXIT_SUCCESS);
}


<<Open input file and allocate [[buffer]]>>=
if (argc < 2)
	errx(1, "missing input filename");
FILE *f = fopen(argv[1], "r");
if (f == NULL)
	err(1, "cannot open %s for reading", argv[1]);
static const u32 BUFFER_SIZE = 131072;
u64 *buffer = malloc(BUFFER_SIZE * sizeof(*buffer));
if (buffer == NULL)
	err(1, "cannot allocate buffer");


@ [[processed]] counts the number of hashes in previously processed buffers.
[[size]] is the size of the current buffer.

<<Fill [[buffer]] from input file>>=
processed += size;
size = fread(buffer, sizeof(*buffer), BUFFER_SIZE, f);
if (ferror(f))
	err(1, "fread failed");

<<Check that [[buffer]] is in-order and duplicate-free>>=
for (u32 i = 0; i < size; i++) {
	if (prev >= buffer[i])
		errx(1, "F[%d] (%016" PRIx64 ") >= F[%d] (%016" PRIx64 ")", 
		          processed + (i-1), prev, processed + i, buffer[i]);
	prev = buffer[i];
}

@

\end{document}
