\documentclass{book}
\usepackage{noweb}

\usepackage{amsmath,amsfonts,amssymb}
\usepackage{textcomp}
\usepackage{parskip}
\usepackage{geometry}
\usepackage{xspace}
\usepackage{hyperref}

\begin{document}
\setcounter{chapter}{6}
\chapter{Forger}

This program forges three hash file with known solutions. 
This is helpful to ensure that the solving code is correct (it must find the solutions...).
The files are written to the current directory.

<<*>>=
<<Header files to include>>
<<Auxiliary functions>>
<<The main program>>

@ We need the usual standard headers.

<<Header files to include>>=
#define _XOPEN_SOURCE 500
#include <stdio.h>
#include <stdlib.h>
#include <inttypes.h>
#include <err.h>
#include "hasher.h"

	
<<The main program>>=
int main(int argc, char **argv)
{
	<<Process the command line>>
	<<Generate random lists>>
	<<Sort $B$ and $C$>>
	<<``Fix'' solutions and display them>>
	<<Sort $A$>>
	<<Display collision indexes>>
	<<Write hash files>>
	exit(EXIT_SUCCESS);
}

@ The average size of lists to generate is given on the command-line.

<<Process the command line>>=
if (argc < 2)
	errx(1, "missing argument N");
u32 avg_size = atoi(argv[1]);

@ To generate random lists, we use SHA256 in counter mode. The sizes of the list may fluctuate.

<<Generate random lists>>=
u32 N[3];
u64 *H[3];
srand48(1337);
for (u32 k = 0; k < 3; k++) {
	N[k] = avg_size / 2 + (((u32) mrand48()) % avg_size);
	printf("H[%d] has size %d\n", k, N[k]);
	H[k] = malloc(N[k] * sizeof(u64));
	if (H[k] == NULL)
		err(1, "cannot allocate hashes");
	struct preimage_t pre;
	pre.nonce = 0;
	pre.counter = 0;
	u32 ptr = 4;
	u32 hash[8];
	u64 *randomness = (u64 *) hash;
	for (u32 n = 0; n < N[k]; n++) {
		if (ptr == 4) {
			compute_full_hash(k, &pre, hash);
			pre.counter++;
			ptr = 0;
		}
		H[k][n] = randomness[ptr++];
	}
}

@ To sort the lists, we again use [[qsort]] with a comparator.

<<Auxiliary functions>>=
int cmp(const void *a_, const void *b_)
{
	const u64 *const a = (u64 *) a_;
	const u64 *const b = (u64 *) b_;
	return (*a > *b) - (*a < *b);
}

<<Sort $B$ and $C$>>=
qsort(H[1], N[1], sizeof(u64), cmp);
qsort(H[2], N[2], sizeof(u64), cmp);

<<Sort $A$>>=
qsort(H[0], N[0], sizeof(u64), cmp);

@ To ensure that there are solutions we know, we force solutions at the very 
begining and at the very end of $B$ and $C$. We also impose a random solution.

<<``Fix'' solutions and display them>>=
u32 b = ((u32) mrand48()) % N[1];
u32 c = ((u32) mrand48()) % N[2];
H[0][0] = H[1][0] ^ H[2][0];
H[0][1] = H[1][N[1] - 1] ^ H[2][1];
H[0][2] = H[1][b] ^ H[2][c];
u64 x[3] = { H[0][0], H[0][1], H[0][2] };
printf("%016" PRIx64 " ^ %016" PRIx64 " ^ %016" PRIx64 " = 0\n", 
	x[0], H[1][0], H[2][0]);
printf("%016" PRIx64 " ^ %016" PRIx64 " ^ %016" PRIx64 " = 0\n", 
	x[1], H[1][N[1] - 1], H[2][N[2] - 1]);
printf("%016" PRIx64 " ^ %016" PRIx64 " ^ %016" PRIx64 " = 0\n", 
	x[2], H[1][b], H[2][c]);

@ After $A$ has been sorted, we must scan it to find the values of $x[i]$.

<<Display collision indexes>>=
u32 y[3];
for (u32 k = 0; k < 3; k++) {
	for (u32 d = 0; d < N[0]; d++)
		if (H[0][d] == x[k]) {
			y[k] = d;
			break;
		}
}
printf("H[0][%08x] ^ H[1][%08x] ^ H[2][%08x] = 0\n", y[0], 0, 0);
printf("H[0][%08x] ^ H[1][%08x] ^ H[2][%08x] = 0\n", y[1], N[1] - 1, N[2] - 1);
printf("H[0][%08x] ^ H[1][%08x] ^ H[2][%08x] = 0\n", y[2], b, c);


@ finally, we write down the hashes in fixed files.

<<Write hash files>>=
char *names[3] = {"foo.000", "bar.000", "foobar.000"};
for (u32 k = 0; k < 3; k++) {
	FILE *f = fopen(names[k], "w");
	if (f == NULL)
		err(1, "cannot open %s for writing", names[k]);
	size_t check = fwrite(H[k], sizeof(uint64_t), N[k], f);
	if (check != N[k])
		errx(1, "incomplete write");
	fclose(f);
}

@

\end{document}
