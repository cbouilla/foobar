\documentclass{book}

\usepackage{geometry}
\usepackage{noweb}
\usepackage{amsmath,amsfonts,amssymb}
\usepackage{parskip}
\usepackage{xspace}
\usepackage{hyperref}

\begin{document}

\setcounter{part}{3}
\part{Postprocessing}

\chapter{Displaying the 3XOR}

This program reads the ``journal file'', extracts and displays the solutions.

<<*>>=
#define _XOPEN_SOURCE 500
#include <stdio.h>
#include <stdlib.h>
#include <limits.h>
#include <getopt.h>
#include <err.h>
#include <math.h>
#include <assert.h>
#include <glob.h>

#include "../preprocessing/preprocessing.h"
#include "../preprocessing/hasher.h"
// #include "../solving/common.h"
#include "../solving/server.h"

int main(int argc, char **argv)
{
        <<Process the command line>>
        <<Parse the journal file>>
	exit(EXIT_SUCCESS);
}

@ Besides the name of the journal file, we need the directory where the dictionaries are located.

<<Process the command line>>=
struct option longopts[3] = {
	{"partitioning-bits", required_argument, NULL, 'k'},
	{"dict-dir", required_argument, NULL, 'd'},
	{NULL, 0, NULL, 0}
};
char *dict_dir = NULL;
char ch;
u32 k = 0xffffffff;
while ((ch = getopt_long(argc, argv, "", longopts, NULL)) != -1) {
    	switch (ch) {
	case 'd':
		dict_dir = optarg;
		break;
	case 'k':
		k = atoi(optarg);
		break;
	default:
		errx(1, "Unknown option\n");
	}
}
if (k == 0xffffffff)
	errx(1, "missing option --partitioning-bits");
if (dict_dir == NULL)
	errx(1, "missing option --dict-dir");
if (optind != argc - 1)
	errx(1, "missing journal filename");
char *journal_filename = argv[optind];


@ We open the journal and read it. Here, we ignore most metadata and focus on task's payloads.

<<Parse the journal file>>=
FILE *f = fopen(journal_filename, "r");
if (!f)
	err(1, "opening %s", journal_filename);
u32 best = 0;
struct preimage_t O[3];
while (1) {
	<<Read a [[task_msg_t]]; if [[EOF]] then exit the loop>>
	<<Skip the [[hostname]]>>
	<<Read a [[result_t]]; if empty, [[continue]]>>
	<<Load and process solutions>>
}
fclose(f);
printf("\nBEST = %d bits\n", best);
for (u32 kind = 0; kind < 3; kind++) {
	char block[128];
	build_plaintext_block(kind, O + kind, block);
	u8 a = block[76];
	u8 b = block[77];
	u8 c = block[78];
	u8 d = block[79];
	block[76] = 0;
	printf("%s\\x%02x\\x%02x\\x%02x\\x%02x\n", block, a, b, c, d);
}

for (u32 kind = 0; kind < 3; kind++) {
	u32 hash[8];
	compute_full_hash(kind, O + kind, hash);
	for (u32 p = 0; p < 8; p++) 
		printf("%08x ", hash[7 - p]);
	printf("\n");
}

<<Read a [[task_msg_t]]; if [[EOF]] then exit the loop>>=
struct task_msg_t task;
if (fread(&task, sizeof(task), 1, f) != 1) {
	if (feof(f))
		break;
	else
		err(1, "reading journal file");
}


<<Skip the [[hostname]]>>=
if (task.hostname_length > HOST_NAME_MAX)
	errx(1, "hostname too long");
if (fseek(f, task.hostname_length, SEEK_CUR))
	err(1, "fseek, skipping over payload");


<<Read a [[result_t]]; if empty, [[continue]]>>=
struct result_t result;
if (fread(&result, sizeof(result), 1, f) != 1)
	err(1, "reading journal file (result size)");
if (result.size == 0)
	continue;


<<Load and process solutions>>=
u64 *solutions = malloc(result.size);
assert((result.size % 24) == 0);
u32 n_solutions = result.size / 24;
if (solutions == NULL)
	err(1, "cannot alloc solutions");
if (fread(solutions, 1, result.size, f) != result.size)
	err(1, "reading journal file (solutions)");
// FIX bad production code
for (u32 i = 0; i < n_solutions; i++) {
	u64 x = solutions[3 * i];
	solutions[3 * i] = solutions[3 * i + 2];
	solutions[3 * i + 2] = solutions[3 * i + 1];
	solutions[3 * i + 1] = x;
}


@ OK, so we have the solutions in memory. We have to find the corresponding preimages. 
To this end, we have to search the corresponding dictionaries. The task descriptions tells
use the partitioning keys for each kind, but there may very well be many dictionary files.
Therefore, we have to search them all.

<<Load and process solutions>>=
struct preimage_t preimages[n_solutions][3];
for (u32 i = 0; i < n_solutions; i++) {
	for (u32 j = 0; j < 3; j++) {
		preimages[i][j].counter = 0;
		preimages[i][j].nonce = 0;
	}
}
u32 task_i = task.id / (1 << k);
u32 task_j = task.id % (1 << k);
u32 task_idx[3] = {task_i, task_j, task_i ^ task_j};
for (u32 kind = 0; kind < 3; kind++) {
	<<Find all dictionaries with correct partitioning key>>
	<<Open each dictionary and search it>>
	<<Release memory>>
}

@ To find all dictionnaries we use [[glob]].

<<Find all dictionaries with correct partitioning key>>=
char pattern[255];
char *kind_prefix[3] = {"foo", "bar", "foobar"};
sprintf(pattern, "%s/%03x/%s.*.sorted", dict_dir, task_idx[kind], kind_prefix[kind]);
glob_t globbuf;
if (glob(pattern, 0, NULL, &globbuf))
	err(1, "glob failed");

<<Release memory>>=
globfree(&globbuf);

@ Because the dictionnaries are sorted, we could do something smart like a dictotomy search,
but this would required us to load them entirely (or do complicated things), and this is most 
likely going to be IO-bound. So sequential search it is.


<<Open each dictionary and search it>>=
for (u32 m = 0; m < globbuf.gl_pathc; m++) {
	char *filename = globbuf.gl_pathv[m];
	static const u32 BUFFER_SIZE = 1024;
	struct dict_t buffer[BUFFER_SIZE];
	FILE * f = fopen(filename, "r");
	if (f == NULL)
		err(1, "cannot open %s for reading", filename);
	// printf("Searching %s\n", filename);
	while (!feof(f)) {
		<<Fill [[buffer]] from [[f]]>>
		<<Search [[buffer]] for preimages>>
	}
	fclose(f);
}

<<Fill [[buffer]] from [[f]]>>=
u32 size = fread(buffer, sizeof(*buffer), BUFFER_SIZE, f);
if (ferror(f))
	err(1, "fread failed");

<<Search [[buffer]] for preimages>>=
for (u32 i = 0; i < size; i++) {
	for (u32 j = 0; j < n_solutions; j++) {
		if (buffer[i].hash == solutions[3 * j + kind]) {
			// printf("found hash %016" PRIx64 " in %s\n", solutions[3 * j + kind], filename);
			preimages[j][kind].counter = buffer[i].preimage.counter;
			preimages[j][kind].nonce = buffer[i].preimage.nonce;
		}
	}
}

@ Once all dictionnaries and all kinds have been processed, in principle we know everything.

<<Load and process solutions>>=
for (u32 i = 0; i < n_solutions; i++) {
	u32 sum[8] = {0, 0, 0, 0, 0, 0, 0, 0};

	for (u32 kind = 0; kind < 3; kind++) {
		u32 hash[8];
		bool valid = compute_full_hash(kind, &preimages[i][kind], hash);
		if (!valid)
			warnx("bizarre, invalid preimage");
		for (u32 p = 0; p < 8; p++) 
			sum[p] ^= hash[p];
	}
	printf("SUM = ");
	for (u32 p = 0; p < 8; p++) 
		printf("%08x ", sum[7 - p]);
	u32 bits = 128 - ceil(log2(sum[4]));
	printf(" --- %d bits\n", bits);
	if (bits > best) {
		best = bits;
		for (u32 kind = 0; kind < 3; kind++) {
			O[kind].counter = preimages[i][kind].counter;
			O[kind].nonce = preimages[i][kind].nonce;
		}
	}
}

@
\end{document}

